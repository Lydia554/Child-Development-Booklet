{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      developmentData: [],\n      // ✅ Ensure it's initialized\n      milestoneData: [],\n      availablePeriods: [],\n      childAge: null,\n      selectedPeriod: null,\n      error: null,\n      loading: true,\n      showMilestoneForm: false\n    };\n  },\n  methods: {\n    async fetchChildAge(childId) {\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get(`http://localhost:5000/api/children/${childId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data.birthDate) {\n          const birthDate = new Date(response.data.birthDate);\n          this.childAge = this.calculateAgeInMonths(birthDate);\n          console.log('🟢 Datum rođenja deteta:', birthDate);\n          console.log('📌 Izračunata starost deteta u mesecima:', this.childAge);\n        } else {\n          console.warn(\"⚠️ Datum rođenja nije pronađen u API odgovoru.\");\n          this.childAge = 0;\n        }\n      } catch (error) {\n        console.error('❌ Greška prilikom dobijanja starosti deteta:', error);\n        this.childAge = 0; // Default to 0 if error occurs\n      }\n    },\n    calculateAgeInMonths(birthDate) {\n      const birth = new Date(birthDate);\n      const now = new Date();\n      return (now.getFullYear() - birth.getFullYear()) * 12 + (now.getMonth() - birth.getMonth());\n    },\n    generateAvailablePeriods() {\n      if (this.childAge === null) {\n        console.warn(\"⚠️ Starost deteta nije postavljena, preskačem generisanje perioda.\");\n        return;\n      }\n      this.availablePeriods = [];\n      for (let i = 0; i <= 72; i += 6) {\n        this.availablePeriods.push({\n          start: i,\n          end: i + 6\n        });\n      }\n      console.log(\"✅ Generisani dostupni periodi:\", this.availablePeriods);\n    },\n    isCurrentPeriod(period) {\n      console.log(`📌 Provera da li je ${period.start}-${period.end} trenutni period za starost ${this.childAge}`);\n      return this.childAge !== null && period.start <= this.childAge && period.end > this.childAge;\n    },\n    isPastPeriod(period) {\n      console.log(`🔄 Provera da li je ${period.start}-${period.end} prošli period za starost ${this.childAge}`);\n      return this.childAge !== null && period.end <= this.childAge;\n    },\n    isFuturePeriod(period) {\n      console.log(`🚫 Provera da li je ${period.start}-${period.end} budući period za starost ${this.childAge}`);\n      return this.childAge !== null && period.start > this.childAge;\n    },\n    formatPeriod(start, end) {\n      return `${start}-${end} meseci`;\n    },\n    isPeriodFilled(period) {\n      if (!this.developmentData) return false;\n      const filled = this.developmentData.some(dev => dev.startAge === period.start && dev.endAge === period.end);\n      console.log(`🔍 Provera da li je period ${period.start}-${period.end} popunjen:`, filled);\n      return filled;\n    },\n    handlePeriodClick(period) {\n      console.log(`🟢 Kliknut period: ${period.start}-${period.end}`);\n      if (this.isFuturePeriod(period)) {\n        console.warn(\"🚫 Budući periodi još nisu dostupni.\");\n        return;\n      }\n      const childId = this.$route.params.childId;\n      if (this.isPeriodFilled(period)) {\n        console.log(\"✅ Period je popunjen, prikazujemo podatke.\");\n        this.selectedPeriod = period;\n      } else if (this.isCurrentPeriod(period) || this.isPastPeriod(period)) {\n        console.log(\"🔄 Preusmeravanje na unos podataka za izabrani period.\");\n        this.$router.push({\n          path: `/child-development-form/${childId}`,\n          query: {\n            startAge: period.start,\n            endAge: period.end\n          }\n        });\n      }\n    }\n  },\n  async created() {\n    try {\n      const childId = this.$route.params.childId;\n      if (childId) {\n        await this.fetchChildAge(childId);\n        this.generateAvailablePeriods(); // ✅ Run only after childAge is set\n      }\n    } catch (error) {\n      console.error('❌ Greška u created():', error);\n    } finally {\n      this.loading = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","developmentData","milestoneData","availablePeriods","childAge","selectedPeriod","error","loading","showMilestoneForm","methods","fetchChildAge","childId","token","sessionStorage","getItem","response","get","headers","Authorization","birthDate","Date","calculateAgeInMonths","console","log","warn","birth","now","getFullYear","getMonth","generateAvailablePeriods","i","push","start","end","isCurrentPeriod","period","isPastPeriod","isFuturePeriod","formatPeriod","isPeriodFilled","filled","some","dev","startAge","endAge","handlePeriodClick","$route","params","$router","path","query","created"],"sources":["C:\\Users\\goldb\\Pro\\Project\\basic-booklet\\frontend\\src\\components\\ChildDevelopmentList.vue"],"sourcesContent":["<template>\r\n  <div class=\"development-container\">\r\n    <div v-if=\"error\" class=\"error-message\">{{ error }}</div>\r\n\r\n    <h2>Pregled Razvoja Deteta</h2>\r\n\r\n    <!-- Debugging Logs -->\r\n    <div class=\"debug-info\">\r\n      <p><strong>Starost deteta:</strong> {{ childAge }} meseci</p>\r\n      <p><strong>Izabrani period:</strong> {{ selectedPeriod ? formatPeriod(selectedPeriod.start, selectedPeriod.end) : 'Nijedan' }}</p>\r\n      <p><strong>Dostupni periodi:</strong> {{ availablePeriods }}</p>\r\n    </div>\r\n\r\n    <!-- Period selector -->\r\n    <div class=\"available-periods\" v-if=\"availablePeriods.length > 0\">\r\n      <h3>Dostupni periodi:</h3>\r\n      <ul>\r\n        <li v-for=\"(period, index) in availablePeriods\" \r\n            :key=\"index\" \r\n            :class=\"{ \r\n              'period-item': true,\r\n              'filled': isPeriodFilled(period),\r\n              'current': isCurrentPeriod(period),\r\n              'past': isPastPeriod(period),\r\n              'future': isFuturePeriod(period),\r\n              'clickable': !isFuturePeriod(period),\r\n              'selected': selectedPeriod && selectedPeriod.start === period.start\r\n            }\"\r\n            @click=\"handlePeriodClick(period)\">\r\n          {{ formatPeriod(period.start, period.end) }}\r\n          <span v-if=\"isPeriodFilled(period)\" class=\"period-status\">(Ispunjeno ✅)</span>\r\n          <span v-else-if=\"isCurrentPeriod(period)\" class=\"period-status current\">(Trenutni period 🟢)</span>\r\n          <span v-else-if=\"isPastPeriod(period)\" class=\"period-status past clickable\">(Kliknite da unesete 🔄)</span>\r\n          <span v-else class=\"period-status future\">(Nije još dostupno 🚫)</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return { \r\n      developmentData: [], // ✅ Ensure it's initialized\r\n      milestoneData: [],\r\n      availablePeriods: [],\r\n      childAge: null, \r\n      selectedPeriod: null,\r\n      error: null,\r\n      loading: true,\r\n      showMilestoneForm: false\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async fetchChildAge(childId) {\r\n      try {\r\n        const token = sessionStorage.getItem('token');\r\n        const response = await axios.get(`http://localhost:5000/api/children/${childId}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n\r\n        if (response.data.birthDate) {\r\n          const birthDate = new Date(response.data.birthDate);\r\n          this.childAge = this.calculateAgeInMonths(birthDate);\r\n\r\n          console.log('🟢 Datum rođenja deteta:', birthDate);\r\n          console.log('📌 Izračunata starost deteta u mesecima:', this.childAge);\r\n        } else {\r\n          console.warn(\"⚠️ Datum rođenja nije pronađen u API odgovoru.\");\r\n          this.childAge = 0;\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Greška prilikom dobijanja starosti deteta:', error);\r\n        this.childAge = 0; // Default to 0 if error occurs\r\n      }\r\n    },\r\n\r\n    calculateAgeInMonths(birthDate) {\r\n      const birth = new Date(birthDate);\r\n      const now = new Date();\r\n      return (now.getFullYear() - birth.getFullYear()) * 12 + (now.getMonth() - birth.getMonth());\r\n    },\r\n\r\n    generateAvailablePeriods() {\r\n      if (this.childAge === null) {\r\n        console.warn(\"⚠️ Starost deteta nije postavljena, preskačem generisanje perioda.\");\r\n        return;\r\n      }\r\n\r\n      this.availablePeriods = [];\r\n      for (let i = 0; i <= 72; i += 6) {\r\n        this.availablePeriods.push({ start: i, end: i + 6 });\r\n      }\r\n\r\n      console.log(\"✅ Generisani dostupni periodi:\", this.availablePeriods);\r\n    },\r\n\r\n    isCurrentPeriod(period) {\r\n      console.log(`📌 Provera da li je ${period.start}-${period.end} trenutni period za starost ${this.childAge}`);\r\n      return this.childAge !== null && period.start <= this.childAge && period.end > this.childAge;\r\n    },\r\n\r\n    isPastPeriod(period) {\r\n      console.log(`🔄 Provera da li je ${period.start}-${period.end} prošli period za starost ${this.childAge}`);\r\n      return this.childAge !== null && period.end <= this.childAge;\r\n    },\r\n\r\n    isFuturePeriod(period) {\r\n      console.log(`🚫 Provera da li je ${period.start}-${period.end} budući period za starost ${this.childAge}`);\r\n      return this.childAge !== null && period.start > this.childAge;\r\n    },\r\n\r\n    formatPeriod(start, end) {\r\n      return `${start}-${end} meseci`;\r\n    },\r\n\r\n    isPeriodFilled(period) {\r\n      if (!this.developmentData) return false;\r\n\r\n      const filled = this.developmentData.some(dev =>\r\n        dev.startAge === period.start && dev.endAge === period.end\r\n      );\r\n\r\n      console.log(`🔍 Provera da li je period ${period.start}-${period.end} popunjen:`, filled);\r\n      return filled;\r\n    },\r\n\r\n    handlePeriodClick(period) {\r\n      console.log(`🟢 Kliknut period: ${period.start}-${period.end}`);\r\n\r\n      if (this.isFuturePeriod(period)) {\r\n        console.warn(\"🚫 Budući periodi još nisu dostupni.\");\r\n        return;\r\n      }\r\n\r\n      const childId = this.$route.params.childId;\r\n      \r\n      if (this.isPeriodFilled(period)) {\r\n        console.log(\"✅ Period je popunjen, prikazujemo podatke.\");\r\n        this.selectedPeriod = period;\r\n      } else if (this.isCurrentPeriod(period) || this.isPastPeriod(period)) {\r\n        console.log(\"🔄 Preusmeravanje na unos podataka za izabrani period.\");\r\n        this.$router.push({\r\n          path: `/child-development-form/${childId}`,\r\n          query: { startAge: period.start, endAge: period.end }\r\n        });\r\n      }\r\n    }\r\n  },\r\n\r\n  async created() {\r\n    try {\r\n      const childId = this.$route.params.childId;\r\n      if (childId) {\r\n        await this.fetchChildAge(childId);\r\n        this.generateAvailablePeriods(); // ✅ Run only after childAge is set\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Greška u created():', error);\r\n    } finally {\r\n      this.loading = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.development-container {\r\n  padding: 20px;\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  background-color: #fee;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.debug-info {\r\n  background: #f8f9fa;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.available-periods ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.period-item {\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  background: #f1f1f1;\r\n  margin: 5px 0;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  transition: 0.3s;\r\n}\r\n\r\n.period-item:hover {\r\n  background: #e1e1e1;\r\n}\r\n\r\n.current {\r\n  background: #c8e6c9;\r\n  font-weight: bold;\r\n}\r\n\r\n.past {\r\n  background: #ffcc80;\r\n}\r\n\r\n.future {\r\n  background: #eeeeee;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.period-status {\r\n  font-size: 0.9em;\r\n  margin-left: 5px;\r\n}\r\n\r\n.clickable {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}