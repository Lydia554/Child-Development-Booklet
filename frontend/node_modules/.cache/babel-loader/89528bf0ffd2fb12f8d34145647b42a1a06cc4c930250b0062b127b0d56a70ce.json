{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    isAuthenticated: false,\n    childIds: [],\n    // Store all child IDs for the user\n    ChildId: null // Store the currently selected child's ID\n  }),\n  actions: {\n    login(token, childId) {\n      this.isAuthenticated = true;\n      sessionStorage.setItem('token', token);\n      sessionStorage.setItem('childIds', JSON.stringify([childId])); // For a single child, store it in an array\n      sessionStorage.setItem('ChildId', childId); // Set current childId\n      this.childIds = [childId];\n      this.ChildId = childId;\n    },\n    logout() {\n      this.isAuthenticated = false;\n      this.childIds = [];\n      this.currentChildId = null;\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('childIds');\n      sessionStorage.removeItem('currentChildId');\n    },\n    checkAuth() {\n      const token = sessionStorage.getItem('token');\n      this.isAuthenticated = !!token;\n      const storedChildIds = JSON.parse(sessionStorage.getItem('childIds')) || [];\n      const storedCurrentChildId = sessionStorage.getItem('currentChildId');\n      this.childIds = storedChildIds;\n      this.currentChildId = storedCurrentChildId || null;\n    },\n    addChildId(childId) {\n      if (!this.childIds.includes(childId)) {\n        this.childIds.push(childId);\n        sessionStorage.setItem('childIds', JSON.stringify(this.childIds));\n      }\n      this.setCurrentChildId(childId); // Switch to the new child\n    },\n    setCurrentChildId(childId) {\n      this.currentChildId = childId;\n      sessionStorage.setItem('currentChildId', childId);\n    },\n    switchChild(childId) {\n      this.setCurrentChildId(childId);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useAuthStore","state","isAuthenticated","childIds","ChildId","actions","login","token","childId","sessionStorage","setItem","JSON","stringify","logout","currentChildId","removeItem","checkAuth","getItem","storedChildIds","parse","storedCurrentChildId","addChildId","includes","push","setCurrentChildId","switchChild"],"sources":["C:/Users/goldb/Pro/Project/basic-booklet/frontend/src/stores/authStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\n\r\nexport const useAuthStore = defineStore('auth', {\r\n  state: () => ({\r\n    isAuthenticated: false,\r\n    childIds: [], // Store all child IDs for the user\r\n    ChildId: null, // Store the currently selected child's ID\r\n  }),\r\n\r\n  actions: {\r\n    login(token, childId) {\r\n      this.isAuthenticated = true;\r\n      sessionStorage.setItem('token', token);\r\n      sessionStorage.setItem('childIds', JSON.stringify([childId])); // For a single child, store it in an array\r\n      sessionStorage.setItem('ChildId', childId); // Set current childId\r\n      this.childIds = [childId];\r\n      this.ChildId = childId;\r\n    },\r\n\r\n    logout() {\r\n      this.isAuthenticated = false;\r\n      this.childIds = [];\r\n      this.currentChildId = null;\r\n      sessionStorage.removeItem('token');\r\n      sessionStorage.removeItem('childIds');\r\n      sessionStorage.removeItem('currentChildId');\r\n    },\r\n\r\n    checkAuth() {\r\n      const token = sessionStorage.getItem('token');\r\n      this.isAuthenticated = !!token;\r\n      const storedChildIds = JSON.parse(sessionStorage.getItem('childIds')) || [];\r\n      const storedCurrentChildId = sessionStorage.getItem('currentChildId');\r\n      this.childIds = storedChildIds;\r\n      this.currentChildId = storedCurrentChildId || null;\r\n    },\r\n\r\n    addChildId(childId) {\r\n      if (!this.childIds.includes(childId)) {\r\n        this.childIds.push(childId);\r\n        sessionStorage.setItem('childIds', JSON.stringify(this.childIds));\r\n      }\r\n      this.setCurrentChildId(childId); // Switch to the new child\r\n    },\r\n\r\n    setCurrentChildId(childId) {\r\n      this.currentChildId = childId;\r\n      sessionStorage.setItem('currentChildId', childId);\r\n    },\r\n\r\n    switchChild(childId) {\r\n      this.setCurrentChildId(childId);\r\n    }\r\n  }\r\n});\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC,MAAM,EAAE;EAC9CE,KAAK,EAAEA,CAAA,MAAO;IACZC,eAAe,EAAE,KAAK;IACtBC,QAAQ,EAAE,EAAE;IAAE;IACdC,OAAO,EAAE,IAAI,CAAE;EACjB,CAAC,CAAC;EAEFC,OAAO,EAAE;IACPC,KAAKA,CAACC,KAAK,EAAEC,OAAO,EAAE;MACpB,IAAI,CAACN,eAAe,GAAG,IAAI;MAC3BO,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;MACtCE,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAC,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/DC,cAAc,CAACC,OAAO,CAAC,SAAS,EAAEF,OAAO,CAAC,CAAC,CAAC;MAC5C,IAAI,CAACL,QAAQ,GAAG,CAACK,OAAO,CAAC;MACzB,IAAI,CAACJ,OAAO,GAAGI,OAAO;IACxB,CAAC;IAEDK,MAAMA,CAAA,EAAG;MACP,IAAI,CAACX,eAAe,GAAG,KAAK;MAC5B,IAAI,CAACC,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACW,cAAc,GAAG,IAAI;MAC1BL,cAAc,CAACM,UAAU,CAAC,OAAO,CAAC;MAClCN,cAAc,CAACM,UAAU,CAAC,UAAU,CAAC;MACrCN,cAAc,CAACM,UAAU,CAAC,gBAAgB,CAAC;IAC7C,CAAC;IAEDC,SAASA,CAAA,EAAG;MACV,MAAMT,KAAK,GAAGE,cAAc,CAACQ,OAAO,CAAC,OAAO,CAAC;MAC7C,IAAI,CAACf,eAAe,GAAG,CAAC,CAACK,KAAK;MAC9B,MAAMW,cAAc,GAAGP,IAAI,CAACQ,KAAK,CAACV,cAAc,CAACQ,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MAC3E,MAAMG,oBAAoB,GAAGX,cAAc,CAACQ,OAAO,CAAC,gBAAgB,CAAC;MACrE,IAAI,CAACd,QAAQ,GAAGe,cAAc;MAC9B,IAAI,CAACJ,cAAc,GAAGM,oBAAoB,IAAI,IAAI;IACpD,CAAC;IAEDC,UAAUA,CAACb,OAAO,EAAE;MAClB,IAAI,CAAC,IAAI,CAACL,QAAQ,CAACmB,QAAQ,CAACd,OAAO,CAAC,EAAE;QACpC,IAAI,CAACL,QAAQ,CAACoB,IAAI,CAACf,OAAO,CAAC;QAC3BC,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACT,QAAQ,CAAC,CAAC;MACnE;MACA,IAAI,CAACqB,iBAAiB,CAAChB,OAAO,CAAC,CAAC,CAAC;IACnC,CAAC;IAEDgB,iBAAiBA,CAAChB,OAAO,EAAE;MACzB,IAAI,CAACM,cAAc,GAAGN,OAAO;MAC7BC,cAAc,CAACC,OAAO,CAAC,gBAAgB,EAAEF,OAAO,CAAC;IACnD,CAAC;IAEDiB,WAAWA,CAACjB,OAAO,EAAE;MACnB,IAAI,CAACgB,iBAAiB,CAAChB,OAAO,CAAC;IACjC;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}