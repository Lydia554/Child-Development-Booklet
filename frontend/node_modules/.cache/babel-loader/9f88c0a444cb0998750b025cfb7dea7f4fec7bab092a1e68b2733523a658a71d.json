{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { useAuthStore } from '../stores/authStore';\nexport default {\n  data() {\n    return {\n      children: [],\n      selectedChildId: null\n    };\n  },\n  created() {\n    const authStore = useAuthStore();\n\n    // Get the list of children stored in the session (or state)\n    const childrenIds = JSON.parse(sessionStorage.getItem('childrenIds')) || [];\n    this.children = childrenIds.map(id => {\n      return {\n        _id: id,\n        name: `Child ${id}`\n      }; // Simulate child data\n    });\n\n    // Set the selectedChildId to the first child (if any) from the list\n    this.selectedChildId = this.selectedChildId || childrenIds[0] || null;\n  },\n  methods: {\n    switchChild() {\n      // Set the selected childId in the store and sessionStorage\n      const authStore = useAuthStore();\n      authStore.setChildId(this.selectedChildId); // Update Pinia store\n      sessionStorage.setItem('childId', this.selectedChildId); // Ensure sessionStorage has the updated childId\n\n      // Redirect to the selected child's development form or list\n      this.$router.push(`/child-development-form/${this.selectedChildId}`);\n    }\n  }\n};","map":{"version":3,"names":["useAuthStore","data","children","selectedChildId","created","authStore","childrenIds","JSON","parse","sessionStorage","getItem","map","id","_id","name","methods","switchChild","setChildId","setItem","$router","push"],"sources":["C:\\Users\\goldb\\Pro\\Project\\basic-booklet\\frontend\\src\\components\\ChildOverview.vue"],"sourcesContent":["<template>\r\n  <div class=\"child-selection-container\">\r\n    <h2 class=\"title\">Pregled sve Djece</h2>\r\n    <div class=\"select-container\">\r\n      <select v-model=\"selectedChildId\" class=\"child-select\">\r\n        <option v-for=\"(child, index) in children\" :key=\"index\" :value=\"child._id\">\r\n          {{ child.name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <button @click=\"switchChild\" class=\"btn\">Prikazi Detalje</button>\r\n\r\n    <div v-if=\"selectedChildId\" class=\"links-container\">\r\n      <router-link :to=\"`/child-development-form/${selectedChildId}`\" class=\"link\">Unos razvoja</router-link>\r\n      <router-link :to=\"`/child-development-list/${selectedChildId}`\" class=\"link\">Pregled razvoja</router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useAuthStore } from '../stores/authStore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      children: [], \r\n      selectedChildId: null \r\n    };\r\n  },\r\n  created() {\r\n    const authStore = useAuthStore();\r\n\r\n    // Get the list of children stored in the session (or state)\r\n    const childrenIds = JSON.parse(sessionStorage.getItem('childrenIds')) || [];\r\n\r\n    this.children = childrenIds.map(id => {\r\n      return { _id: id, name: `Child ${id}` }; // Simulate child data\r\n    });\r\n\r\n    // Set the selectedChildId to the first child (if any) from the list\r\n    this.selectedChildId = this.selectedChildId || childrenIds[0] || null;\r\n  },\r\n  methods: {\r\n    switchChild() {\r\n      // Set the selected childId in the store and sessionStorage\r\n      const authStore = useAuthStore();\r\n      authStore.setChildId(this.selectedChildId); // Update Pinia store\r\n      sessionStorage.setItem('childId', this.selectedChildId); // Ensure sessionStorage has the updated childId\r\n\r\n      // Redirect to the selected child's development form or list\r\n      this.$router.push(`/child-development-form/${this.selectedChildId}`);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n  <style lang=\"scss\">\r\n  .child-selection-container {\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    background-color: #f9f9f9;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  \r\n    .title {\r\n      text-align: center;\r\n      font-size: 24px;\r\n      color: #333;\r\n      margin-bottom: 20px;\r\n    }\r\n  \r\n    .select-container {\r\n      margin-bottom: 20px;\r\n  \r\n      .child-select {\r\n        width: 100%;\r\n        padding: 10px;\r\n        font-size: 16px;\r\n        border-radius: 4px;\r\n        border: 1px solid #ccc;\r\n        background-color: #fff;\r\n        color: #333;\r\n        outline: none;\r\n        \r\n        &:focus {\r\n          border-color: #007bff;\r\n        }\r\n      }\r\n    }\r\n  \r\n    .btn {\r\n      width: 100%;\r\n      padding: 10px;\r\n      font-size: 16px;\r\n      background-color: #007bff;\r\n      color: #fff;\r\n      border: none;\r\n      border-radius: 4px;\r\n      cursor: pointer;\r\n  \r\n      &:hover {\r\n        background-color: #0056b3;\r\n      }\r\n    }\r\n  \r\n    .links-container {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      margin-top: 20px;\r\n  \r\n      .link {\r\n        color: #007bff;\r\n        text-decoration: none;\r\n        font-size: 16px;\r\n  \r\n        &:hover {\r\n          text-decoration: underline;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </style>\r\n  "],"mappings":";;;AAqBA,SAASA,YAAW,QAAS,qBAAqB;AAElD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,SAAQ,GAAIL,YAAY,CAAC,CAAC;;IAEhC;IACA,MAAMM,WAAU,GAAIC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE;IAE3E,IAAI,CAACR,QAAO,GAAII,WAAW,CAACK,GAAG,CAACC,EAAC,IAAK;MACpC,OAAO;QAAEC,GAAG,EAAED,EAAE;QAAEE,IAAI,EAAE,SAASF,EAAE;MAAG,CAAC,EAAE;IAC3C,CAAC,CAAC;;IAEF;IACA,IAAI,CAACT,eAAc,GAAI,IAAI,CAACA,eAAc,IAAKG,WAAW,CAAC,CAAC,KAAK,IAAI;EACvE,CAAC;EACDS,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ;MACA,MAAMX,SAAQ,GAAIL,YAAY,CAAC,CAAC;MAChCK,SAAS,CAACY,UAAU,CAAC,IAAI,CAACd,eAAe,CAAC,EAAE;MAC5CM,cAAc,CAACS,OAAO,CAAC,SAAS,EAAE,IAAI,CAACf,eAAe,CAAC,EAAE;;MAEzD;MACA,IAAI,CAACgB,OAAO,CAACC,IAAI,CAAC,2BAA2B,IAAI,CAACjB,eAAe,EAAE,CAAC;IACtE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}