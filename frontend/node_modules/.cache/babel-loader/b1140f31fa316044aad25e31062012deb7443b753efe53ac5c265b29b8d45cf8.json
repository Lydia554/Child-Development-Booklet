{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport api from '../axios';\nexport default {\n  data() {\n    return {\n      milestones: [],\n      newMilestone: {\n        milestoneType: '',\n        milestoneDate: '',\n        progress: '',\n        notes: ''\n      },\n      isEditing: false\n    };\n  },\n  async created() {\n    await this.fetchMilestones();\n  },\n  methods: {\n    async fetchMilestones() {\n      try {\n        const response = await api.get('/milestones');\n        this.milestones = response.data;\n      } catch (error) {\n        console.error('Greška pri dohvatanju milestone-ova:', error);\n      }\n    },\n    async submitMilestone() {\n      try {\n        const response = await api.post('/milestones', this.newMilestone);\n        this.milestones.push(response.data);\n        this.resetForm();\n      } catch (error) {\n        console.error('Greška prilikom dodavanja milestone-a:', error);\n      }\n    },\n    async updateMilestone() {\n      try {\n        await api.put(`/milestones/${this.newMilestone._id}`, this.newMilestone);\n        const index = this.milestones.findIndex(m => m._id === this.newMilestone._id);\n        if (index !== -1) {\n          this.milestones.splice(index, 1, this.newMilestone);\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error('Greška prilikom ažuriranja milestone-a:', error);\n      }\n    },\n    async deleteMilestone(id) {\n      try {\n        await api.delete(`/milestones/${id}`);\n        this.milestones = this.milestones.filter(m => m._id !== id);\n      } catch (error) {\n        console.error('Greška prilikom brisanja milestone-a:', error);\n      }\n    },\n    editMilestone(milestone) {\n      this.newMilestone = {\n        ...milestone\n      };\n      this.isEditing = true;\n    },\n    resetForm() {\n      this.newMilestone = {\n        milestoneType: '',\n        milestoneDate: '',\n        progress: '',\n        notes: ''\n      };\n      this.isEditing = false;\n    }\n  }\n};","map":{"version":3,"names":["api","data","milestones","newMilestone","milestoneType","milestoneDate","progress","notes","isEditing","created","fetchMilestones","methods","response","get","error","console","submitMilestone","post","push","resetForm","updateMilestone","put","_id","index","findIndex","m","splice","deleteMilestone","id","delete","filter","editMilestone","milestone"],"sources":["C:\\Users\\goldb\\Pro\\Project\\basic-booklet\\frontend\\src\\components\\MilestoneList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Lista Milestone-ova</h2>\r\n    <ul>\r\n      <li v-for=\"milestone in milestones\" :key=\"milestone._id\">\r\n        <strong>{{ milestone.milestoneType }}</strong> - {{ milestone.milestoneDate }}\r\n        <button @click=\"editMilestone(milestone)\">Izmeni</button>\r\n        <button @click=\"deleteMilestone(milestone._id)\">Obriši</button>\r\n      </li>\r\n    </ul>\r\n    \r\n    <h3>{{ isEditing ? 'Izmeni Milestone' : 'Dodaj Milestone' }}</h3>\r\n    <form @submit.prevent=\"isEditing ? updateMilestone() : submitMilestone()\">\r\n      <input v-model=\"newMilestone.milestoneType\" placeholder=\"Tip Milestone-a\" required />\r\n      <input v-model=\"newMilestone.milestoneDate\" type=\"date\" required />\r\n      <input v-model=\"newMilestone.progress\" placeholder=\"Napredak\" required />\r\n      <textarea v-model=\"newMilestone.notes\" placeholder=\"Beleške\"></textarea>\r\n      <button type=\"submit\">{{ isEditing ? 'Sačuvaj izmene' : 'Dodaj' }}</button>\r\n      <button v-if=\"isEditing\" @click=\"resetForm\">Otkaži</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from '../axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      milestones: [],\r\n      newMilestone: {\r\n        milestoneType: '',\r\n        milestoneDate: '',\r\n        progress: '',\r\n        notes: '',\r\n      },\r\n      isEditing: false,\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchMilestones();\r\n  },\r\n  methods: {\r\n    async fetchMilestones() {\r\n      try {\r\n        const response = await api.get('/milestones');\r\n        this.milestones = response.data;\r\n      } catch (error) {\r\n        console.error('Greška pri dohvatanju milestone-ova:', error);\r\n      }\r\n    },\r\n    async submitMilestone() {\r\n      try {\r\n        const response = await api.post('/milestones', this.newMilestone);\r\n        this.milestones.push(response.data);\r\n        this.resetForm();\r\n      } catch (error) {\r\n        console.error('Greška prilikom dodavanja milestone-a:', error);\r\n      }\r\n    },\r\n    async updateMilestone() {\r\n      try {\r\n        await api.put(`/milestones/${this.newMilestone._id}`, this.newMilestone);\r\n        const index = this.milestones.findIndex(m => m._id === this.newMilestone._id);\r\n        if (index !== -1) {\r\n          this.milestones.splice(index, 1, this.newMilestone);\r\n        }\r\n        this.resetForm();\r\n      } catch (error) {\r\n        console.error('Greška prilikom ažuriranja milestone-a:', error);\r\n      }\r\n    },\r\n    async deleteMilestone(id) {\r\n      try {\r\n        await api.delete(`/milestones/${id}`);\r\n        this.milestones = this.milestones.filter(m => m._id !== id);\r\n      } catch (error) {\r\n        console.error('Greška prilikom brisanja milestone-a:', error);\r\n      }\r\n    },\r\n    editMilestone(milestone) {\r\n      this.newMilestone = { ...milestone };\r\n      this.isEditing = true;\r\n    },\r\n    resetForm() {\r\n      this.newMilestone = { milestoneType: '', milestoneDate: '', progress: '', notes: '' };\r\n      this.isEditing = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;;AAwBA,OAAOA,GAAE,MAAO,UAAU;AAE1B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE;QACZC,aAAa,EAAE,EAAE;QACjBC,aAAa,EAAE,EAAE;QACjBC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE;MACT,CAAC;MACDC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,eAAe,CAAC,CAAC;EAC9B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMZ,GAAG,CAACa,GAAG,CAAC,aAAa,CAAC;QAC7C,IAAI,CAACX,UAAS,GAAIU,QAAQ,CAACX,IAAI;MACjC,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IACD,MAAME,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMJ,QAAO,GAAI,MAAMZ,GAAG,CAACiB,IAAI,CAAC,aAAa,EAAE,IAAI,CAACd,YAAY,CAAC;QACjE,IAAI,CAACD,UAAU,CAACgB,IAAI,CAACN,QAAQ,CAACX,IAAI,CAAC;QACnC,IAAI,CAACkB,SAAS,CAAC,CAAC;MAClB,EAAE,OAAOL,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF,CAAC;IACD,MAAMM,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMpB,GAAG,CAACqB,GAAG,CAAC,eAAe,IAAI,CAAClB,YAAY,CAACmB,GAAG,EAAE,EAAE,IAAI,CAACnB,YAAY,CAAC;QACxE,MAAMoB,KAAI,GAAI,IAAI,CAACrB,UAAU,CAACsB,SAAS,CAACC,CAAA,IAAKA,CAAC,CAACH,GAAE,KAAM,IAAI,CAACnB,YAAY,CAACmB,GAAG,CAAC;QAC7E,IAAIC,KAAI,KAAM,CAAC,CAAC,EAAE;UAChB,IAAI,CAACrB,UAAU,CAACwB,MAAM,CAACH,KAAK,EAAE,CAAC,EAAE,IAAI,CAACpB,YAAY,CAAC;QACrD;QACA,IAAI,CAACgB,SAAS,CAAC,CAAC;MAClB,EAAE,OAAOL,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MACjE;IACF,CAAC;IACD,MAAMa,eAAeA,CAACC,EAAE,EAAE;MACxB,IAAI;QACF,MAAM5B,GAAG,CAAC6B,MAAM,CAAC,eAAeD,EAAE,EAAE,CAAC;QACrC,IAAI,CAAC1B,UAAS,GAAI,IAAI,CAACA,UAAU,CAAC4B,MAAM,CAACL,CAAA,IAAKA,CAAC,CAACH,GAAE,KAAMM,EAAE,CAAC;MAC7D,EAAE,OAAOd,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IACDiB,aAAaA,CAACC,SAAS,EAAE;MACvB,IAAI,CAAC7B,YAAW,GAAI;QAAE,GAAG6B;MAAU,CAAC;MACpC,IAAI,CAACxB,SAAQ,GAAI,IAAI;IACvB,CAAC;IACDW,SAASA,CAAA,EAAG;MACV,IAAI,CAAChB,YAAW,GAAI;QAAEC,aAAa,EAAE,EAAE;QAAEC,aAAa,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC;MACrF,IAAI,CAACC,SAAQ,GAAI,KAAK;IACxB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}