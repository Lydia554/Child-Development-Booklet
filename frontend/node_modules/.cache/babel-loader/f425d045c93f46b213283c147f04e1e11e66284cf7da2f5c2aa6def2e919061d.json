{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { useAuthStore } from '@/stores/authStore'; // Import the Pinia store\n\nexport default {\n  props: ['childId', 'milestoneId'],\n  data() {\n    return {\n      newMilestone: {\n        milestoneType: '',\n        milestoneDate: '',\n        progress: '',\n        notes: ''\n      },\n      errorMessage: ''\n    };\n  },\n  created() {\n    const authStore = useAuthStore();\n    // Get childId from Pinia store if it's not passed via props\n    const childId = authStore.childId || this.childId;\n\n    // If there's a milestoneId, fetch the data to prefill the form\n    if (this.milestoneId) {\n      this.fetchMilestoneData();\n    } else if (!childId) {\n      this.errorMessage = 'Nema ID deteta. Molimo se ulogujte i pokušajte ponovo.';\n      this.$router.push('/child-registration');\n    }\n  },\n  methods: {\n    async fetchMilestoneData() {\n      try {\n        const token = sessionStorage.getItem('token');\n        const response = await axios.get(`http://localhost:5000/api/milestones/${this.milestoneId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.newMilestone = response.data;\n      } catch (error) {\n        console.error('Greška pri preuzimanju podataka o ključnoj tački:', error);\n        this.errorMessage = 'Nije moguće preuzeti podatke o ključnoj tački';\n      }\n    },\n    async submitMilestone() {\n      const token = sessionStorage.getItem('token');\n      if (!token) {\n        this.errorMessage = 'Morate biti ulogovani da biste uneli ključnoj moment.';\n        return;\n      }\n      if (!this.newMilestone.milestoneType || !this.newMilestone.milestoneDate || !this.newMilestone.progress) {\n        this.errorMessage = 'Sva polja su obavezna.';\n        return;\n      }\n      try {\n        let response;\n        // If milestoneId exists, update the milestone; otherwise, create a new one\n        if (this.milestoneId) {\n          response = await axios.put(`http://localhost:5000/api/milestones/${this.milestoneId}`, this.newMilestone, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n        } else {\n          // If there's no milestoneId, create a new milestone\n          response = await axios.post(`http://localhost:5000/api/milestones`, {\n            ...this.newMilestone,\n            childId: this.childId\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n        }\n        console.log('Kljucni Moment sačuvan:', response);\n        this.$router.push(`/milestone-list/${this.childId}`);\n      } catch (error) {\n        console.error('Greška pri čuvanju ključnog momenta:', error);\n        this.errorMessage = 'Nije moguće sačuvati podatke o ključnom momentu.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","useAuthStore","props","data","newMilestone","milestoneType","milestoneDate","progress","notes","errorMessage","created","authStore","childId","milestoneId","fetchMilestoneData","$router","push","methods","token","sessionStorage","getItem","response","get","headers","Authorization","error","console","submitMilestone","put","post","log"],"sources":["C:\\Users\\goldb\\Pro\\Project\\basic-booklet\\frontend\\src\\components\\MilestoneForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"milestone-form\">\r\n    <h2>{{ milestoneId ? 'Izmeni Kljucni Moment' : 'Dodaj Kljucni Moment' }}</h2>\r\n    <form @submit.prevent=\"submitMilestone\" class=\"form-container\">\r\n      <div class=\"form-group\">\r\n        <label for=\"milestoneType\">Tip Kljucnog Moment-a:</label>\r\n        <input\r\n          v-model=\"newMilestone.milestoneType\"\r\n          required\r\n          type=\"text\"\r\n          class=\"form-input\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"milestoneDate\">Datum Kljucnog Moment-a:</label>\r\n        <input\r\n          v-model=\"newMilestone.milestoneDate\"\r\n          required\r\n          type=\"date\"\r\n          class=\"form-input\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"progress\">Napredak:</label>\r\n        <input\r\n          v-model=\"newMilestone.progress\"\r\n          required\r\n          type=\"text\"\r\n          class=\"form-input\"\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"notes\">Napomene:</label>\r\n        <textarea\r\n          v-model=\"newMilestone.notes\"\r\n          class=\"form-input\"\r\n          rows=\"4\"\r\n        ></textarea>\r\n      </div>\r\n      <button type=\"submit\" class=\"submit-btn\">\r\n        {{ milestoneId ? 'Ažuriraj Kljucni Moment' : 'Dodaj Kljucni Moment' }}\r\n      </button>\r\n    </form>\r\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { useAuthStore } from '@/stores/authStore'; // Import the Pinia store\r\n\r\nexport default {\r\n  props: ['childId', 'milestoneId'],\r\n  data() {\r\n    return {\r\n      newMilestone: {\r\n        milestoneType: '',\r\n        milestoneDate: '',\r\n        progress: '',\r\n        notes: '',\r\n      },\r\n      errorMessage: '',\r\n    };\r\n  },\r\n  created() {\r\n    const authStore = useAuthStore();\r\n    // Get childId from Pinia store if it's not passed via props\r\n    const childId = authStore.childId || this.childId;\r\n\r\n    // If there's a milestoneId, fetch the data to prefill the form\r\n    if (this.milestoneId) {\r\n      this.fetchMilestoneData();\r\n    } else if (!childId) {\r\n      this.errorMessage = 'Nema ID deteta. Molimo se ulogujte i pokušajte ponovo.';\r\n      this.$router.push('/child-registration');\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchMilestoneData() {\r\n      try {\r\n        const token = sessionStorage.getItem('token');\r\n        const response = await axios.get(\r\n          `http://localhost:5000/api/milestones/${this.milestoneId}`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n        this.newMilestone = response.data;\r\n      } catch (error) {\r\n        console.error('Greška pri preuzimanju podataka o ključnoj tački:', error);\r\n        this.errorMessage = 'Nije moguće preuzeti podatke o ključnoj tački';\r\n      }\r\n    },\r\n    async submitMilestone() {\r\n      const token = sessionStorage.getItem('token');\r\n      if (!token) {\r\n        this.errorMessage = 'Morate biti ulogovani da biste uneli ključnoj moment.';\r\n        return;\r\n      }\r\n\r\n      if (!this.newMilestone.milestoneType || !this.newMilestone.milestoneDate || !this.newMilestone.progress) {\r\n        this.errorMessage = 'Sva polja su obavezna.';\r\n        return;\r\n      }\r\n\r\n      try {\r\n        let response;\r\n        // If milestoneId exists, update the milestone; otherwise, create a new one\r\n        if (this.milestoneId) {\r\n          response = await axios.put(\r\n            `http://localhost:5000/api/milestones/${this.milestoneId}`,\r\n            this.newMilestone,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n        } else {\r\n          // If there's no milestoneId, create a new milestone\r\n          response = await axios.post(\r\n            `http://localhost:5000/api/milestones`,\r\n            { ...this.newMilestone, childId: this.childId },\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n        }\r\n\r\n        console.log('Kljucni Moment sačuvan:', response);\r\n        this.$router.push(`/milestone-list/${this.childId}`);\r\n      } catch (error) {\r\n        console.error('Greška pri čuvanju ključnog momenta:', error);\r\n        this.errorMessage = 'Nije moguće sačuvati podatke o ključnom momentu.';\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style lang=\"scss\">\r\n.milestone-form {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background-color: #f7f7f7;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n\r\n  h2 {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    color: #333;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .form-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .form-group {\r\n      margin-bottom: 15px;\r\n\r\n      label {\r\n        font-size: 16px;\r\n        font-weight: bold;\r\n        color: #333;\r\n        margin-bottom: 5px;\r\n      }\r\n\r\n      input,\r\n      textarea {\r\n        width: 100%;\r\n        padding: 10px;\r\n        font-size: 14px;\r\n        border: 1px solid #ccc;\r\n        border-radius: 5px;\r\n        box-sizing: border-box;\r\n      }\r\n\r\n      textarea {\r\n        height: 100px;\r\n        resize: vertical;\r\n      }\r\n    }\r\n\r\n    .submit-btn {\r\n      padding: 12px 20px;\r\n      font-size: 16px;\r\n      color: #fff;\r\n      background-color: #007bff;\r\n      border: none;\r\n      border-radius: 5px;\r\n      cursor: pointer;\r\n      transition: background-color 0.3s ease;\r\n\r\n      &:hover {\r\n        background-color: #0056b3;\r\n      }\r\n    }\r\n  }\r\n\r\n  .error-message {\r\n    margin-top: 20px;\r\n    padding: 10px;\r\n    background-color: #f8d7da;\r\n    border: 1px solid #f5c6cb;\r\n    color: #721c24;\r\n    border-radius: 5px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}